; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:esp32s3_lckfb_N8R8]  ;由于esp32-s3-devkitc-1配置是8 MB QD, No PSRAM)，只能自定义板框架继承esp32-s3-devkitc-1配置匹配开发板硬件，定义文件位置boards/esp32s3_n8r8.json
platform = espressif32@~6.11.0
framework = arduino
board = esp32-s3-devkitc-1

; --- 内存与闪存配置 (使用高层复合配置) ---
; 使用PlatformIO内置的高优先级复合配置可同时启用QIO Flash和OPI PSRAM。
; qio_opi是为 N8R8 (8MB Octal PSRAM + 8MB Quad Flash) 模块启用最高性能的推荐方式。
; 它会自动处理底层的 sdkconfig 选项，如 SPIRAM_MODE_OCT, SPIRAM_SPEED_80M 等，避免手动配置错误。
board_build.arduino.memory_type = qio_opi   ;启用 QIO Flash 和 OPI Octal PSRAM,将 8MB PSRAM 集成到主内存堆(malloc)中,如不支持qio_opi,可降级为dio_opi。
; --- 分区与文件系统配置 ---
board_build.partitions = my_8MB.csv  ; 使用自定义8MB flash分区表my_8MB.csv，默认为default_8MB.csv，原文件已在参考文件夹中。
board_build.filesystem = littlefs    ; 指定使用 LittleFS 作为文件系统，存放 WebUI 文件的目录 (HTML, CSS, JS, images, i18n)
board_build.filesystem_force_format = true ; 强制在上传时格式化文件系统分区，确保文件系统干净

; --- 额外压缩脚本 (Extra Scripts) ---
; 在构建文件系统镜像之前运行自定义脚本，用于Minify和Gzip前端资源
extra_scripts = pre:minify_gzip.py

# ------------------------------------------------------------------------------
#  编译标志与库管理
# ------------------------------------------------------------------------------
; ESP-IDF v4.x 及 Arduino Core v3+，推荐使用以下两个宏
build_flags =
    -DCONFIG_SPIRAM_USE_MALLOC          ;启用 PSRAM 内存分配器
    -DCONFIG_SPIRAM_MALLOC_USE_MALLOC   ;使默认的 malloc() 函数使用 PSRAM
    -DCORE_DEBUG_LEVEL=ARDUINO_DEBUG_INFO ; 设置Arduino Core的日志级别为INFO，以便查看更多调试信息
;    -DARDUINO_USB_MODE=1               ;MSC (Mass Storage)
;    -DARDUINO_USB_CDC_ON_BOOT=1        ;使用原生USB口输出串口信息(Serial)

; --- 底层 SDK 自定义配置 (board_build.sdkconfig_options) ---
board_build.sdkconfig_options =
    CONFIG_LOG_DEFAULT_LEVEL=3                  ; 设置ESP-IDF默认日志级别为INFO (3)
    ; --- Wi-Fi统一配网 (Unified Provisioning) 组件配置 ---
    CONFIG_WIFI_PROV_MGR_ENABLED=y              ; 启用Wi-Fi配网管理器核心功能
    CONFIG_WIFI_PROV_TRANSPORT_SOFTAP=y         ; (可选)选择SoftAP配网方式
    CONFIG_WIFI_PROV_SECURITY_MODE_1=y          ; 设置配网的安全性等级
    CONFIG_WIFI_PROV_SOFTAP_SSID="esp32s3"      ; AP配网SSID名称，可以不设置，系统会生成默认的
    CONFIG_WIFI_PROV_SOFTAP_PASSWORD="12345678" ; AP配网密码，可以不设置，系统会生成默认的

; --- 蓝牙协议栈配置 (Bluedroid vs NimBLE) ---
    ; 此处选择Bluedroid，它是一个功能更全的协议栈，支持经典蓝牙(A2DP)和BLE。
    CONFIG_BT_ENABLED=y                         ; 启用蓝牙控制器 (Controller)，是所有蓝牙功能的基础
    CONFIG_BT_HOST_BLUEDROID_ENABLED=y          ; 选择并启用Bluedroid作为蓝牙主机协议栈
    ; 由于Bluedroid和NimBLE主机协议栈不能同时启用，因此禁用NimBLE。
    CONFIG_BT_HOST_NIMBLE_ENABLED=n             ; 禁用NimBLE。注意：sdkconfig中的键是 _ENABLED
    CONFIG_WIFI_PROV_TRANSPORT_BLE=n            ; 禁用基于BLE的配网，因为它通常与NimBLE配合使用
    ; CONFIG_BT_BLE_ENABLED=y                   ; (可选)想在Bluedroid下启用BLE，可以添加此项
    ; CONFIG_BT_CLASSIC_ENABLED=y               ; (可选)想在Bluedroid下启用经典蓝牙（如A2DP），可以添加此项

; --- 库依赖 (lib_deps) ---
lib_deps =
    ; -------------------------------------------
    ; 1. 核心与网络 (当前阶段必需)
    ; -------------------------------------------
    ; 兼容 Arduino Core v3+ 的异步TCP库 (ESPAsyncWebServer的依赖)
    esphome/AsyncTCP-esphome @ ^2.1.4
    ; 兼容 Arduino Core v3+ 的异步Web服务器 (注意这个库的调用类名是：AsyncWebServer)
    esphome/ESPAsyncWebServer-esphome @ ^3.4.0
    ; 显式添加WiFi库，确保链接
    WiFi

    ; -------------------------------------------
    ; 2. 数据处理与存储
    ; -------------------------------------------
    ; 高效的JSON库，用于API数据交换和i18n语言文件解析 (7.x版本是最新系列)
    bblanchon/ArduinoJson @ ^7.4.1
    ; LittleFS文件系统库 (在Arduino Core v3+中已集成，无需显式声明，除非需要固定特定版本)
    ; LittleFS

    ; -------------------------------------------
    ; 4. 后期功能模块 (摄像头与识别)
    ; -------------------------------------------
    ; [后期开发计划] ESP32 UVC USB摄像头驱动库
    ; https://github.com/espressif/esp32-camera.git
    ; [后期开发计划] 强大的条码识别库 (这是一个C++库，需要集成到PlatformIO)
    ; https://github.com/zxing-cpp/zxing-cpp.git
    ; https://github.com/mchehab/zbar.git  ; 备用库

# ------------------------------------------------------------------------------
#  上传与监视端口配置 (根据你的硬件连接)
# ------------------------------------------------------------------------------
; --- 上传配置 ---
upload_port       = COM3               ; 指定上传固件的端口 (CH340K硬件UART桥接芯片)
upload_speed      = 921600             ; 设置上传波特率，提高烧录速度

; --- 串口监视器配置 ---
monitor_port      = COM4               ; 指定监视输出的端口 (N8R8程序输出通过硬件UART0，经由CH340K芯片，最终出现在COM4上)
monitor_speed     = 115200             ; 设置监视器波特率，需与代码中 Serial.begin() 一致
;monitor_dtr       = 0                  ; 禁用DTR信号，防止原生USB串口意外重置
;monitor_rts       = 0                  ; 禁用RTS信号，提高原生USB串口兼容性
